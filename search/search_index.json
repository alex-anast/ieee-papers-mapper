{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to IEEE Papers Mapper The IEEE Papers Mapper is an innovative tool designed for automating the process of fetching, processing, and classifying research papers from the IEEE Xplore API. It integrates data extraction, machine learning classification, and interactive data visualization to provide insights into categorized research topics. Explore the documentation to learn how to use, contribute, and extend the project. Key Features Automated data retrieval and processing pipeline. Paper classification using state-of-the-art transformer models. Interactive Dash-based web application for visualizing research data. Modular design for easy extension and integration.","title":"Home"},{"location":"index.html#welcome-to-ieee-papers-mapper","text":"The IEEE Papers Mapper is an innovative tool designed for automating the process of fetching, processing, and classifying research papers from the IEEE Xplore API. It integrates data extraction, machine learning classification, and interactive data visualization to provide insights into categorized research topics. Explore the documentation to learn how to use, contribute, and extend the project.","title":"Welcome to IEEE Papers Mapper"},{"location":"index.html#key-features","text":"Automated data retrieval and processing pipeline. Paper classification using state-of-the-art transformer models. Interactive Dash-based web application for visualizing research data. Modular design for easy extension and integration.","title":"Key Features"},{"location":"about.html","text":"About The IEEE Papers Mapper project was created to streamline research management workflows. By leveraging advanced data pipelines and machine learning models, the project aims to provide efficient solutions for categorizing and visualizing large volumes of research papers. Motivation Academic and industrial researchers often deal with overwhelming volumes of research. This tool simplifies the process of managing, classifying, and gaining insights from these papers. Technologies Used Python : Core programming language. Dash & Plotly : For building interactive web applications. SQLite : Lightweight database for managing data. Hugging Face Transformers : For paper classification using encoder-only models. MkDocs : For generating project documentation.","title":"About"},{"location":"about.html#about","text":"The IEEE Papers Mapper project was created to streamline research management workflows. By leveraging advanced data pipelines and machine learning models, the project aims to provide efficient solutions for categorizing and visualizing large volumes of research papers.","title":"About"},{"location":"about.html#motivation","text":"Academic and industrial researchers often deal with overwhelming volumes of research. This tool simplifies the process of managing, classifying, and gaining insights from these papers.","title":"Motivation"},{"location":"about.html#technologies-used","text":"Python : Core programming language. Dash & Plotly : For building interactive web applications. SQLite : Lightweight database for managing data. Hugging Face Transformers : For paper classification using encoder-only models. MkDocs : For generating project documentation.","title":"Technologies Used"},{"location":"developer_guide/api_reference.html","text":"API Reference get_papers.py get_papers(query, start_year, ...) Fetches papers from the IEEE API. process_papers.py process_papers(df_raw) Processes raw data for classification. classify_papers.py classify_all_papers(df) Classifies papers using a transformer-based model.","title":"API Reference"},{"location":"developer_guide/api_reference.html#api-reference","text":"","title":"API Reference"},{"location":"developer_guide/api_reference.html#get_paperspy","text":"","title":"get_papers.py"},{"location":"developer_guide/api_reference.html#get_papersquery-start_year","text":"Fetches papers from the IEEE API.","title":"get_papers(query, start_year, ...)"},{"location":"developer_guide/api_reference.html#process_paperspy","text":"","title":"process_papers.py"},{"location":"developer_guide/api_reference.html#process_papersdf_raw","text":"Processes raw data for classification.","title":"process_papers(df_raw)"},{"location":"developer_guide/api_reference.html#classify_paperspy","text":"","title":"classify_papers.py"},{"location":"developer_guide/api_reference.html#classify_all_papersdf","text":"Classifies papers using a transformer-based model.","title":"classify_all_papers(df)"},{"location":"developer_guide/code_structure.html","text":"Code Structure The project is organized as follows: Key Directories app/ : Contains the web application. dash_webapp.py : Launches the Dash app. callbacks.py : Defines interactivity for the Dash app. data/ : Core data processing pipeline. get_papers.py : Fetches data from IEEE Xplore API. process_papers.py : Preprocesses raw paper data. classify_papers.py : Classifies papers using transformers. database.py : Manages SQLite database operations. pipeline.py : Streamlines the process of paper classification altogether. config/ : Configuration files. config.py : Contains configuration variables. scheduler.py : Sets up the job scheduler. tests/ : Unit tests for validating modules. Supporting Files README.md : Project overview and setup instructions. setup.py : Packaging configuration. mkdocs.yml : Style and format of MkDocs documentation.","title":"Code Structure"},{"location":"developer_guide/code_structure.html#code-structure","text":"The project is organized as follows:","title":"Code Structure"},{"location":"developer_guide/code_structure.html#key-directories","text":"app/ : Contains the web application. dash_webapp.py : Launches the Dash app. callbacks.py : Defines interactivity for the Dash app. data/ : Core data processing pipeline. get_papers.py : Fetches data from IEEE Xplore API. process_papers.py : Preprocesses raw paper data. classify_papers.py : Classifies papers using transformers. database.py : Manages SQLite database operations. pipeline.py : Streamlines the process of paper classification altogether. config/ : Configuration files. config.py : Contains configuration variables. scheduler.py : Sets up the job scheduler. tests/ : Unit tests for validating modules.","title":"Key Directories"},{"location":"developer_guide/code_structure.html#supporting-files","text":"README.md : Project overview and setup instructions. setup.py : Packaging configuration. mkdocs.yml : Style and format of MkDocs documentation.","title":"Supporting Files"},{"location":"user_guide/installation.html","text":"Installation Guide Follow these steps to set up and run the IEEE Papers Mapper on your local machine. Prerequisites Ensure you have the following installed: Python 3.12 or later Pip (Python package manager) Git Installation Steps (User) Create a working directory: mkdir my_project Create and activate a virtual environment: python -m venv venv source venv/bin/activate Install ieee-papers-mapper pip package: pip install ieee-papers-mapper Installation Steps (Developer) Clone the repository: git clone https://github.com/alex-anast/ieee-papers-mapper.git cd ieee-papers-mapper Create and activate a virtual environment: python -m venv venv source venv/bin/activate Install the required dependencies: pip install -r requirements.txt Install the project in editable mode: pip install -e . Open the web app for visualizing the results. At the start, it is going to be an empty page: python ieee_papers_mapper/data/app/dash_webapp.py Initiate the sourcing of papers coming in from IEEE Xplore API: python ieee_papers_mapper/data/main.py","title":"Installation"},{"location":"user_guide/installation.html#installation-guide","text":"Follow these steps to set up and run the IEEE Papers Mapper on your local machine.","title":"Installation Guide"},{"location":"user_guide/installation.html#prerequisites","text":"Ensure you have the following installed: Python 3.12 or later Pip (Python package manager) Git","title":"Prerequisites"},{"location":"user_guide/installation.html#installation-steps-user","text":"Create a working directory: mkdir my_project Create and activate a virtual environment: python -m venv venv source venv/bin/activate Install ieee-papers-mapper pip package: pip install ieee-papers-mapper","title":"Installation Steps (User)"},{"location":"user_guide/installation.html#installation-steps-developer","text":"Clone the repository: git clone https://github.com/alex-anast/ieee-papers-mapper.git cd ieee-papers-mapper Create and activate a virtual environment: python -m venv venv source venv/bin/activate Install the required dependencies: pip install -r requirements.txt Install the project in editable mode: pip install -e . Open the web app for visualizing the results. At the start, it is going to be an empty page: python ieee_papers_mapper/data/app/dash_webapp.py Initiate the sourcing of papers coming in from IEEE Xplore API: python ieee_papers_mapper/data/main.py","title":"Installation Steps (Developer)"},{"location":"user_guide/overview.html","text":"Overview The IEEE Papers Mapper provides an end-to-end solution for handling research papers. The tool automates data retrieval, processes and classifies research papers, and displays categorized results in an interactive web app. Workflow Data Retrieval : Fetch papers from the IEEE Xplore API. Data Processing : Clean and structure the data. Classification : Classify papers using transformer-based models. Visualization : Explore categorized papers via the web application.","title":"Overview"},{"location":"user_guide/overview.html#overview","text":"The IEEE Papers Mapper provides an end-to-end solution for handling research papers. The tool automates data retrieval, processes and classifies research papers, and displays categorized results in an interactive web app.","title":"Overview"},{"location":"user_guide/overview.html#workflow","text":"Data Retrieval : Fetch papers from the IEEE Xplore API. Data Processing : Clean and structure the data. Classification : Classify papers using transformer-based models. Visualization : Explore categorized papers via the web application.","title":"Workflow"},{"location":"user_guide/usage.html","text":"Usage Guide This guide explains how to use the IEEE Papers Mapper pipeline and visualize results. Running the Pipeline Fetch, process, and classify new papers: python -m ieee_papers_mapper.main --run-pipeline Running the Web Application To visualize the results: python -m ieee_papers_mapper.app.dash_webapp Open your browser and navigate to http://127.0.0.1:8050 to interact with the web app.","title":"Usage"},{"location":"user_guide/usage.html#usage-guide","text":"This guide explains how to use the IEEE Papers Mapper pipeline and visualize results.","title":"Usage Guide"},{"location":"user_guide/usage.html#running-the-pipeline","text":"Fetch, process, and classify new papers: python -m ieee_papers_mapper.main --run-pipeline","title":"Running the Pipeline"},{"location":"user_guide/usage.html#running-the-web-application","text":"To visualize the results: python -m ieee_papers_mapper.app.dash_webapp Open your browser and navigate to http://127.0.0.1:8050 to interact with the web app.","title":"Running the Web Application"}]}